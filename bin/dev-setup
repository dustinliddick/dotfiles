#!/usr/bin/env bash
# Development environment setup utility
# Helps bootstrap development tools and environments

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_help() {
    cat << EOF
Development Environment Setup Utility

Usage: dev-setup [command] [options]

Commands:
    homebrew        Install Homebrew (macOS)
    essential       Install essential development tools
    python          Setup Python environment
    node            Setup Node.js environment
    rust            Setup Rust environment
    go              Setup Go environment
    docker          Install Docker
    all             Install everything
    help            Show this help message

Options:
    --dry-run       Show what would be installed without installing

Examples:
    dev-setup essential     # Install essential tools
    dev-setup python       # Setup Python
    dev-setup all          # Install everything
EOF
}

check_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "unknown"
    fi
}

install_homebrew() {
    if [[ "$(check_os)" != "macos" ]]; then
        log_error "Homebrew is only available on macOS"
        return 1
    fi
    
    if command -v brew &> /dev/null; then
        log_info "Homebrew is already installed"
        return 0
    fi
    
    log_info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    log_success "Homebrew installed"
}

install_essential_tools() {
    log_info "Installing essential development tools..."
    
    if [[ "$(check_os)" == "macos" ]]; then
        # Ensure Homebrew is available
        if ! command -v brew &> /dev/null; then
            install_homebrew
        fi
        
        # Essential CLI tools
        local tools=(
            "git"
            "curl"
            "wget"
            "jq"
            "tree"
            "bat"
            "fd"
            "ripgrep"
            "fzf"
            "tmux"
            "neovim"
            "delta"
        )
        
        for tool in "${tools[@]}"; do
            if ! command -v "$tool" &> /dev/null; then
                log_info "Installing $tool..."
                brew install "$tool"
            else
                log_info "$tool is already installed"
            fi
        done
    else
        log_warning "Essential tools installation for Linux not implemented yet"
        log_info "Please install manually: git, curl, wget, jq, tree, bat, fd, ripgrep, fzf, tmux, neovim"
    fi
    
    log_success "Essential tools installation completed"
}

setup_python() {
    log_info "Setting up Python environment..."
    
    if [[ "$(check_os)" == "macos" ]]; then
        # Install pyenv
        if ! command -v pyenv &> /dev/null; then
            log_info "Installing pyenv..."
            brew install pyenv
        fi
        
        # Install latest Python
        latest_python=$(pyenv install --list | grep -E '^\s*3\.[0-9]+\.[0-9]+$' | tail -1 | xargs)
        log_info "Installing Python $latest_python..."
        pyenv install "$latest_python" || true
        pyenv global "$latest_python"
    fi
    
    # Install common Python tools
    log_info "Installing common Python tools..."
    pip3 install --upgrade pip
    pip3 install virtualenv pipenv poetry black flake8 mypy
    
    log_success "Python environment setup completed"
}

setup_node() {
    log_info "Setting up Node.js environment..."
    
    if [[ "$(check_os)" == "macos" ]]; then
        # Install nvm
        if [[ ! -d "$HOME/.nvm" ]]; then
            log_info "Installing nvm..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            
            # Source nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        fi
        
        # Install latest Node.js LTS
        if command -v nvm &> /dev/null; then
            log_info "Installing Node.js LTS..."
            nvm install --lts
            nvm use --lts
        fi
    fi
    
    # Install global packages
    if command -v npm &> /dev/null; then
        log_info "Installing global npm packages..."
        npm install -g yarn pnpm typescript eslint prettier @angular/cli create-react-app
    fi
    
    log_success "Node.js environment setup completed"
}

setup_rust() {
    log_info "Setting up Rust environment..."
    
    if ! command -v rustc &> /dev/null; then
        log_info "Installing Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"
    fi
    
    # Install common Rust tools
    log_info "Installing common Rust tools..."
    cargo install ripgrep fd-find bat exa
    
    log_success "Rust environment setup completed"
}

setup_go() {
    log_info "Setting up Go environment..."
    
    if [[ "$(check_os)" == "macos" ]]; then
        if ! command -v go &> /dev/null; then
            log_info "Installing Go..."
            brew install go
        fi
    fi
    
    # Set up Go workspace
    if [[ ! -d "$HOME/go" ]]; then
        mkdir -p "$HOME/go/{bin,src,pkg}"
    fi
    
    log_success "Go environment setup completed"
}

install_docker() {
    log_info "Installing Docker..."
    
    if [[ "$(check_os)" == "macos" ]]; then
        if ! command -v docker &> /dev/null; then
            brew install --cask docker
            log_info "Docker installed. Please start Docker Desktop manually."
        fi
    else
        log_warning "Docker installation for Linux not implemented"
        log_info "Please install Docker manually from https://docs.docker.com/engine/install/"
    fi
    
    log_success "Docker installation completed"
}

install_all() {
    log_info "Installing complete development environment..."
    
    install_homebrew
    install_essential_tools
    setup_python
    setup_node
    setup_rust
    setup_go
    install_docker
    
    log_success "Complete development environment setup completed!"
}

# Main command dispatcher
case "${1:-help}" in
    homebrew)
        install_homebrew
        ;;
    essential)
        install_essential_tools
        ;;
    python)
        setup_python
        ;;
    node)
        setup_node
        ;;
    rust)
        setup_rust
        ;;
    go)
        setup_go
        ;;
    docker)
        install_docker
        ;;
    all)
        install_all
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        log_error "Unknown command: $1"
        echo
        show_help
        exit 1
        ;;
esac