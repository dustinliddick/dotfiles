#!/bin/bash

# Project initialization utility
# Creates new development projects with common structure and tools

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

show_help() {
    cat << EOF
Project Initialization Utility

Usage: project-init <project-name> [type]

Project Types:
    node        Node.js/JavaScript project with npm
    python      Python project with virtual environment
    go          Go project with modules
    rust        Rust project with Cargo
    web         Basic web project (HTML/CSS/JS)
    docs        Documentation project with README and structure

Options:
    --help, -h  Show this help message

Examples:
    project-init my-app node
    project-init my-lib python
    project-init my-service go
    project-init my-project rust
    project-init my-site web
    project-init my-docs docs

EOF
}

# Create basic project structure
create_base_structure() {
    local project_name="$1"
    local project_type="$2"
    
    mkdir -p "$project_name"
    cd "$project_name"
    
    # Initialize git repository
    git init
    print_success "Initialized git repository"
    
    # Create basic .gitignore
    create_gitignore "$project_type"
    
    # Create README
    create_readme "$project_name" "$project_type"
    
    print_success "Created basic project structure for $project_name"
}

# Create appropriate .gitignore file
create_gitignore() {
    local project_type="$1"
    
    cat > .gitignore << EOF
# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
*~

# Editor files
*.swp
*.swo
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

EOF

    case "$project_type" in
        "node")
            cat >> .gitignore << EOF
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity
dist/
build/

EOF
            ;;
        "python")
            cat >> .gitignore << EOF
# Python
__pycache__/
*.py[cod]
*\$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/
.pytest_cache/
.coverage
htmlcov/
*.egg-info/
dist/
build/

EOF
            ;;
        "go")
            cat >> .gitignore << EOF
# Go
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
vendor/

EOF
            ;;
        "rust")
            cat >> .gitignore << EOF
# Rust
target/
Cargo.lock
**/*.rs.bk

EOF
            ;;
        "web")
            cat >> .gitignore << EOF
# Web
dist/
build/
.cache/
.parcel-cache/

EOF
            ;;
    esac
    
    print_success "Created .gitignore for $project_type project"
}

# Create README file
create_readme() {
    local project_name="$1"
    local project_type="$2"
    
    cat > README.md << EOF
# $project_name

A $project_type project.

## Description

Brief description of your project.

## Installation

Instructions for installing and setting up the project.

## Usage

How to use your project.

## Contributing

Instructions for contributing to the project.

## License

License information.

EOF

    print_success "Created README.md"
}

# Initialize Node.js project
init_node_project() {
    local project_name="$1"
    
    print_info "Setting up Node.js project..."
    
    # Create package.json
    npm init -y > /dev/null
    
    # Update package.json with project name
    if command -v jq &> /dev/null; then
        cat package.json | jq ".name = \"$project_name\"" > temp.json && mv temp.json package.json
    fi
    
    # Create basic project structure
    mkdir -p src tests
    
    # Create basic files
    cat > src/index.js << EOF
console.log('Hello, World!');
EOF
    
    cat > tests/index.test.js << EOF
// Basic test file
describe('Basic test', () => {
  test('should pass', () => {
    expect(true).toBe(true);
  });
});
EOF
    
    print_success "Created Node.js project structure"
    print_info "Run 'npm install' to install dependencies"
}

# Initialize Python project
init_python_project() {
    local project_name="$1"
    
    print_info "Setting up Python project..."
    
    # Create virtual environment
    python3 -m venv venv
    print_success "Created virtual environment"
    
    # Create basic project structure
    mkdir -p src tests docs
    
    # Create basic files
    cat > src/main.py << EOF
#!/usr/bin/env python3
"""
Main module for $project_name
"""

def main():
    """Main function"""
    print("Hello, World!")

if __name__ == "__main__":
    main()
EOF
    
    cat > tests/test_main.py << EOF
"""
Tests for main module
"""
import unittest
from src.main import main

class TestMain(unittest.TestCase):
    def test_main(self):
        # Basic test
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
EOF
    
    cat > requirements.txt << EOF
# Add your project dependencies here
EOF
    
    print_success "Created Python project structure"
    print_info "Activate virtual environment with: source venv/bin/activate"
}

# Initialize Go project
init_go_project() {
    local project_name="$1"
    
    print_info "Setting up Go project..."
    
    # Initialize Go module
    go mod init "$project_name"
    
    # Create basic files
    cat > main.go << EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
EOF
    
    mkdir -p internal pkg cmd
    
    print_success "Created Go project structure"
    print_info "Run 'go run main.go' to test"
}

# Initialize Rust project
init_rust_project() {
    local project_name="$1"
    
    print_info "Setting up Rust project..."
    
    # Use cargo to create the project structure
    cargo init --name "$project_name" .
    
    print_success "Created Rust project structure"
    print_info "Run 'cargo run' to test"
}

# Initialize web project
init_web_project() {
    local project_name="$1"
    
    print_info "Setting up web project..."
    
    mkdir -p src css js images
    
    cat > index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$project_name</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <h1>$project_name</h1>
    <p>Welcome to your web project!</p>
    
    <script src="js/main.js"></script>
</body>
</html>
EOF
    
    cat > css/style.css << EOF
/* Basic styles for $project_name */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f5f5f5;
}

h1 {
    color: #333;
    text-align: center;
}
EOF
    
    cat > js/main.js << EOF
// JavaScript for $project_name
document.addEventListener('DOMContentLoaded', function() {
    console.log('$project_name loaded!');
});
EOF
    
    print_success "Created web project structure"
}

# Initialize documentation project
init_docs_project() {
    local project_name="$1"
    
    print_info "Setting up documentation project..."
    
    mkdir -p docs images
    
    cat > docs/getting-started.md << EOF
# Getting Started

Instructions for getting started with $project_name.

EOF
    
    cat > docs/api.md << EOF
# API Documentation

API documentation for $project_name.

EOF
    
    print_success "Created documentation project structure"
}

# Main function
main() {
    if [[ $# -eq 0 ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        show_help
        exit 0
    fi
    
    local project_name="$1"
    local project_type="${2:-docs}"
    
    if [[ -z "$project_name" ]]; then
        print_error "Project name is required"
        show_help
        exit 1
    fi
    
    if [[ -d "$project_name" ]]; then
        print_error "Directory '$project_name' already exists"
        exit 1
    fi
    
    print_info "Creating $project_type project: $project_name"
    
    create_base_structure "$project_name" "$project_type"
    
    case "$project_type" in
        "node")
            init_node_project "$project_name"
            ;;
        "python")
            init_python_project "$project_name"
            ;;
        "go")
            init_go_project "$project_name"
            ;;
        "rust")
            init_rust_project "$project_name"
            ;;
        "web")
            init_web_project "$project_name"
            ;;
        "docs")
            init_docs_project "$project_name"
            ;;
        *)
            print_error "Unknown project type: $project_type"
            show_help
            exit 1
            ;;
    esac
    
    # Initial commit
    git add .
    git commit -m "Initial commit: $project_type project setup"
    
    print_success "Project $project_name created successfully!"
    print_info "Change to project directory: cd $project_name"
}

main "$@"