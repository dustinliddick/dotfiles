#!/bin/bash

# System information display utility
# Shows useful system stats and information

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Helper function to print colored output
print_section() {
    echo -e "${BLUE}▶ $1${NC}"
}

print_item() {
    printf "  %-20s ${GREEN}%s${NC}\n" "$1:" "$2"
}

echo -e "${CYAN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║                                SYSTEM INFORMATION                             ║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
echo

# System Information
print_section "System Information"
print_item "Hostname" "$(hostname)"
print_item "OS" "$(uname -s)"
print_item "Kernel" "$(uname -r)"
print_item "Architecture" "$(uname -m)"

if [[ "$OSTYPE" == "darwin"* ]]; then
    print_item "macOS Version" "$(sw_vers -productVersion)"
    print_item "Build Version" "$(sw_vers -buildVersion)"
elif [[ -f /etc/os-release ]]; then
    . /etc/os-release
    print_item "Distribution" "$NAME $VERSION"
fi

print_item "Uptime" "$(uptime | awk -F'( |,|:)+' '{if ($6=="min") printf "%d days, %d hours, %d minutes", $4, $5, $6; else printf "%d days, %d hours, %d minutes", $4, $5, $6}')"
echo

# Hardware Information
print_section "Hardware Information"
if [[ "$OSTYPE" == "darwin"* ]]; then
    print_item "Model" "$(system_profiler SPHardwareDataType | awk '/Model Name/ {print $3" "$4" "$5}')"
    print_item "Processor" "$(system_profiler SPHardwareDataType | awk '/Processor Name/ {for(i=3;i<=NF;i++) printf "%s ", $i; print ""}')"
    print_item "Memory" "$(system_profiler SPHardwareDataType | awk '/Memory/ {print $2" "$3}')"
else
    if command -v lscpu &> /dev/null; then
        print_item "CPU" "$(lscpu | grep 'Model name' | sed 's/Model name: *//')"
        print_item "CPU Cores" "$(nproc)"
    fi
    
    if [[ -f /proc/meminfo ]]; then
        local total_mem=$(awk '/MemTotal/ {print int($2/1024/1024)" GB"}' /proc/meminfo)
        print_item "Memory" "$total_mem"
    fi
fi
echo

# Network Information
print_section "Network Information"
if [[ "$OSTYPE" == "darwin"* ]]; then
    local ip=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | head -1 | awk '{print $2}')
    print_item "IP Address" "${ip:-"Not connected"}"
    
    local wifi_network=$(networksetup -getairportnetwork en0 | cut -d: -f2 | sed 's/^ *//')
    if [[ "$wifi_network" != "You are not associated with an AirPort network." ]]; then
        print_item "WiFi Network" "$wifi_network"
    fi
else
    local ip=$(ip route get 1 2>/dev/null | awk '{print $NF;exit}' 2>/dev/null)
    print_item "IP Address" "${ip:-"Not connected"}"
fi
echo

# Development Environment
print_section "Development Environment"

# Shell
print_item "Current Shell" "$SHELL"

# Git
if command -v git &> /dev/null; then
    print_item "Git Version" "$(git --version | awk '{print $3}')"
    local git_user=$(git config --global user.name 2>/dev/null)
    local git_email=$(git config --global user.email 2>/dev/null)
    [[ -n "$git_user" ]] && print_item "Git User" "$git_user <$git_email>"
fi

# Node.js
if command -v node &> /dev/null; then
    print_item "Node.js" "$(node --version)"
fi

if command -v npm &> /dev/null; then
    print_item "npm" "$(npm --version)"
fi

# Python
if command -v python3 &> /dev/null; then
    print_item "Python 3" "$(python3 --version | awk '{print $2}')"
fi

# Ruby
if command -v ruby &> /dev/null; then
    print_item "Ruby" "$(ruby --version | awk '{print $2}')"
fi

# Go
if command -v go &> /dev/null; then
    print_item "Go" "$(go version | awk '{print $3}' | sed 's/go//')"
fi

# Docker
if command -v docker &> /dev/null; then
    print_item "Docker" "$(docker --version | awk '{print $3}' | sed 's/,//')"
fi

# Homebrew (macOS)
if command -v brew &> /dev/null; then
    print_item "Homebrew" "$(brew --version | head -1 | awk '{print $2}')"
fi
echo

# Disk Usage
print_section "Storage Information"
if [[ "$OSTYPE" == "darwin"* ]]; then
    df -h / | awk 'NR==2 {printf "  %-20s %s used of %s (%s full)\n", "Root Disk:", $3, $2, $5}'
else
    df -h / | awk 'NR==2 {printf "  %-20s %s used of %s (%s full)\n", "Root Disk:", $3, $2, $5}'
fi

# Home directory size
if command -v du &> /dev/null; then
    local home_size=$(du -sh "$HOME" 2>/dev/null | awk '{print $1}')
    [[ -n "$home_size" ]] && print_item "Home Directory" "$home_size"
fi
echo